{"version":3,"sources":["components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Notification/Notification.js","App.js","index.js"],"names":["Section","title","children","className","FeedbackOptions","onLeaveFeedback","onClick","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","App","state","addFeedback","e","setState","prevState","target","textContent","countTotalFeedback","Object","values","reduce","acc","el","countPositiveFeedbackPercentage","Math","round","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PASeA,EATC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,qCACE,oBAAIC,UAAU,QAAd,SAAuBF,IACtBC,MCYQE,EAhBS,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBACzB,OACE,qCACE,wBAAQF,UAAU,MAAMG,QAASD,EAAjC,kBAGA,wBAAQF,UAAU,MAAMG,QAASD,EAAjC,qBAGA,wBAAQF,UAAU,MAAMG,QAASD,EAAjC,qBCGSE,EAZI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,qBAAIT,UAAU,OAAd,UACE,qBAAIA,UAAU,OAAd,mBAA4BK,KAC5B,qBAAIL,UAAU,OAAd,sBAA+BM,KAC/B,qBAAIN,UAAU,OAAd,kBAA2BO,KAC3B,qBAAIP,UAAU,OAAd,oBAA6BQ,KAC7B,qBAAIR,UAAU,OAAd,gCAAyCS,EAAzC,WCLSC,EAFM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,mBAAGX,UAAU,eAAb,SAA6BW,KCuDpDC,E,4MA/CbC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPO,YAAc,SAAAC,GACZ,EAAKC,UAAS,SAAAC,GAAS,sBACpBF,EAAEG,OAAOC,YAAcF,EAAUF,EAAEG,OAAOC,aAAe,O,EAI9DC,mBAAqB,WAInB,OAHcC,OAAOC,OAAO,EAAKT,OAAOU,QAAO,SAACC,EAAKC,GACnD,OAAOD,EAAMC,IACZ,I,EAILC,gCAAkC,WAChC,OAAOC,KAAKC,MAAO,EAAKf,MAAMR,KAAO,EAAKe,qBAAwB,M,4CAGpE,WACE,OACE,qCACE,cAAC,EAAD,CAAStB,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBI,gBAAiB2B,KAAKf,gBAEzC,cAAC,EAAD,CAAShB,MAAM,aAAf,SACG+B,KAAKT,qBACJ,cAAC,EAAD,CACEf,KAAMwB,KAAKhB,MAAMR,KACjBC,QAASuB,KAAKhB,MAAMP,QACpBC,IAAKsB,KAAKhB,MAAMN,IAChBC,MAAOqB,KAAKT,qBACZX,mBAAoBoB,KAAKH,oCAG3B,cAAC,EAAD,CAAcf,QAAQ,+B,GAxChBmB,aCDlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.addcd160.chunk.js","sourcesContent":["const Section = ({ title, children }) => {\r\n  return (\r\n    <>\r\n      <h1 className=\"title\">{title}</h1>\r\n      {children}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Section;\r\n","const FeedbackOptions = ({ onLeaveFeedback }) => {\r\n  return (\r\n    <>\r\n      <button className=\"btn\" onClick={onLeaveFeedback}>\r\n        good\r\n      </button>\r\n      <button className=\"btn\" onClick={onLeaveFeedback}>\r\n        neutral\r\n      </button>\r\n      <button className=\"btn\" onClick={onLeaveFeedback}>\r\n        bad\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","const Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <ul className=\"list\">\r\n      <li className=\"item\">Good: {good}</li>\r\n      <li className=\"item\">Neutral: {neutral}</li>\r\n      <li className=\"item\">Bad: {bad}</li>\r\n      <li className=\"item\">Total: {total}</li>\r\n      <li className=\"item\">Positive feedback: {positivePercentage}%</li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Statistics;\r\n","const Notification = ({ message }) => <p className=\"notification\">{message}</p>;\r\n\r\nexport default Notification;\r\n","import { Component } from 'react';\n// import PropTypes from 'prop-types';\nimport Section from './components/Section/Section';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Statistics from './components/Statistics/Statistics';\nimport Notification from './components/Notification/Notification';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  addFeedback = e => {\n    this.setState(prevState => ({\n      [e.target.textContent]: prevState[e.target.textContent] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    const total = Object.values(this.state).reduce((acc, el) => {\n      return acc + el;\n    }, 0);\n    return total;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    return Math.round((this.state.good / this.countTotalFeedback()) * 100);\n  };\n\n  render() {\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions onLeaveFeedback={this.addFeedback} />\n        </Section>\n        <Section title=\"Statistics\">\n          {this.countTotalFeedback() ? (\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}